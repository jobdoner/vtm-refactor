// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/jobdoner/vtm-refactor/models"
)

// CreateTechAdGroupOKCode is the HTTP code returned for type CreateTechAdGroupOK
const CreateTechAdGroupOKCode int = 200

/*CreateTechAdGroupOK create Tech Adgroup

swagger:response createTechAdGroupOK
*/
type CreateTechAdGroupOK struct {

	/*
	  In: Body
	*/
	Payload *models.CreateTechAdGroupResp `json:"body,omitempty"`
}

// NewCreateTechAdGroupOK creates CreateTechAdGroupOK with default headers values
func NewCreateTechAdGroupOK() *CreateTechAdGroupOK {

	return &CreateTechAdGroupOK{}
}

// WithPayload adds the payload to the create tech ad group o k response
func (o *CreateTechAdGroupOK) WithPayload(payload *models.CreateTechAdGroupResp) *CreateTechAdGroupOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create tech ad group o k response
func (o *CreateTechAdGroupOK) SetPayload(payload *models.CreateTechAdGroupResp) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateTechAdGroupOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateTechAdGroupConflictCode is the HTTP code returned for type CreateTechAdGroupConflict
const CreateTechAdGroupConflictCode int = 409

/*CreateTechAdGroupConflict TechAdGroup already exis

swagger:response createTechAdGroupConflict
*/
type CreateTechAdGroupConflict struct {
}

// NewCreateTechAdGroupConflict creates CreateTechAdGroupConflict with default headers values
func NewCreateTechAdGroupConflict() *CreateTechAdGroupConflict {

	return &CreateTechAdGroupConflict{}
}

// WriteResponse to the client
func (o *CreateTechAdGroupConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}
