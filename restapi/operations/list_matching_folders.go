// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ListMatchingFoldersHandlerFunc turns a function with the right signature into a list matching folders handler
type ListMatchingFoldersHandlerFunc func(ListMatchingFoldersParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ListMatchingFoldersHandlerFunc) Handle(params ListMatchingFoldersParams) middleware.Responder {
	return fn(params)
}

// ListMatchingFoldersHandler interface for that can handle valid list matching folders params
type ListMatchingFoldersHandler interface {
	Handle(ListMatchingFoldersParams) middleware.Responder
}

// NewListMatchingFolders creates a new http.Handler for the list matching folders operation
func NewListMatchingFolders(ctx *middleware.Context, handler ListMatchingFoldersHandler) *ListMatchingFolders {
	return &ListMatchingFolders{Context: ctx, Handler: handler}
}

/*ListMatchingFolders swagger:route GET /folders/match listMatchingFolders

ListMatchingFolders list matching folders API

*/
type ListMatchingFolders struct {
	Context *middleware.Context
	Handler ListMatchingFoldersHandler
}

func (o *ListMatchingFolders) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewListMatchingFoldersParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
