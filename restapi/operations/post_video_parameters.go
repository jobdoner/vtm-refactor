// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostVideoParams creates a new PostVideoParams object
// no default values defined in spec.
func NewPostVideoParams() PostVideoParams {

	return PostVideoParams{}
}

// PostVideoParams contains all the bound params for the post video operation
// typically these are obtained from a http.Request
//
// swagger:parameters PostVideo
type PostVideoParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*creativeID
	  In: formData
	*/
	CreativeID *string
	/*title
	  In: formData
	*/
	Description *string
	/*folderID
	  In: formData
	*/
	FolderID *int64
	/*title
	  In: formData
	*/
	Title *string
	/*upload
	  In: formData
	*/
	UploadFile []io.ReadCloser
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewPostVideoParams() beforehand.
func (o *PostVideoParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}
	fds := runtime.Values(r.Form)

	fdCreativeID, fdhkCreativeID, _ := fds.GetOK("creativeID")
	if err := o.bindCreativeID(fdCreativeID, fdhkCreativeID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdDescription, fdhkDescription, _ := fds.GetOK("description")
	if err := o.bindDescription(fdDescription, fdhkDescription, route.Formats); err != nil {
		res = append(res, err)
	}

	fdFolderID, fdhkFolderID, _ := fds.GetOK("folderID")
	if err := o.bindFolderID(fdFolderID, fdhkFolderID, route.Formats); err != nil {
		res = append(res, err)
	}

	fdTitle, fdhkTitle, _ := fds.GetOK("title")
	if err := o.bindTitle(fdTitle, fdhkTitle, route.Formats); err != nil {
		res = append(res, err)
	}

	fdUploadFile, fdhkUploadFile, _ := fds.GetOK("uploadFile")
	if err := o.bindUploadFile(fdUploadFile, fdhkUploadFile, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCreativeID binds and validates parameter CreativeID from formData.
func (o *PostVideoParams) bindCreativeID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CreativeID = &raw

	return nil
}

// bindDescription binds and validates parameter Description from formData.
func (o *PostVideoParams) bindDescription(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Description = &raw

	return nil
}

// bindFolderID binds and validates parameter FolderID from formData.
func (o *PostVideoParams) bindFolderID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("folderID", "formData", "int64", raw)
	}
	o.FolderID = &value

	return nil
}

// bindTitle binds and validates parameter Title from formData.
func (o *PostVideoParams) bindTitle(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.Title = &raw

	return nil
}

// bindUploadFile binds and validates array parameter UploadFile from formData.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *PostVideoParams) bindUploadFile(rawData []string, hasKey bool, formats strfmt.Registry) error {

	var qvUploadFile string
	if len(rawData) > 0 {
		qvUploadFile = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	uploadFileIC := swag.SplitByFormat(qvUploadFile, "")
	if len(uploadFileIC) == 0 {
		return nil
	}

	var uploadFileIR []io.ReadCloser
	for i, uploadFileIV := range uploadFileIC {
		// items.Format: "binary"
		value, err := formats.Parse("binary", uploadFileIV)
		if err != nil {
			return errors.InvalidType(fmt.Sprintf("%s.%v", "uploadFile", i), "formData", "io.ReadCloser", value)
		}
		uploadFileI := *(value.(*io.ReadCloser))

		uploadFileIR = append(uploadFileIR, uploadFileI)
	}

	o.UploadFile = uploadFileIR

	return nil
}
